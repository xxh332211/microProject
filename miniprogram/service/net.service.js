"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const failHandle = (err) => {
    switch (err.data.code) {
        case 400:
            wx.hideToast();
            wx.showToast({
                title: err.data.message || '请求失败',
                icon: "none",
                duration: 2000
            });
            break;
        case 401:
            wx.hideToast();
            wx.redirectTo({ url: '/pages/login/login' });
            break;
        default:
            wx.showToast({
                title: '请求失败',
                icon: "none",
                duration: 2000
            });
            wx.hideToast();
            break;
    }
};
const successHandle = (res) => {
    switch (res.data.code) {
        case 200:
            wx.hideToast();
            break;
        case 400:
            wx.hideToast();
            wx.showToast({
                title: res.data.message || '请求成功',
                icon: "none",
                duration: 2000
            });
            break;
        case 401:
            wx.hideToast();
            wx.redirectTo({ url: '/pages/login/login' });
            break;
        default:
            wx.hideToast();
            break;
    }
};
class API {
    constructor() {
        this.HOST = 'https://api.021xzy.com';
    }
    http(URL, type, option, authority) {
        let token = wx.getStorageSync('token');
        let _data = option.data || {};
        let _header = option.data || {};
        if (authority === 'authority') {
            _header = Object.assign({ Token: token }, _header);
        }
        wx.showToast({
            title: "加载中",
            icon: 'loading',
            duration: 9999
        });
        return new Promise((resolve, reject) => {
            wx.request({
                url: this.HOST + URL,
                method: type,
                data: _data,
                timeout: 5000,
                header: Object.assign({ 'content-type': 'application/json', 'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization', 'Access-Control-Allow-Method': 'GET, POST, OPTIONS', 'Access-Control-Allow-Origin': "*" }, _header),
                complete(e) {
                    if (e.statusCode === 200 && e.data.code === 200) {
                        successHandle(e);
                        resolve(e);
                    }
                    else {
                        failHandle(e);
                        reject(e);
                    }
                }
            });
        });
    }
    typeHandle(type) {
        let typeNumber;
        switch (type) {
            case 'community':
                typeNumber = 5;
                break;
            case 'village':
                typeNumber = 8;
                break;
            case 'unit':
                typeNumber = 6;
                break;
            case 'street':
                typeNumber = 7;
                break;
            default:
                typeNumber = 0;
                break;
        }
        return typeNumber;
    }
    getDate() {
        return new Date().toISOString().split('T')[0];
    }
    checkToken() {
        this.http(`/backend/api/checkToken`, 'GET', {}, 'authority');
    }
    login(username, password) {
        return this.http('/backend/api/login', "POST", { data: { user_name: username, pwd: password, type: 1 } });
    }
    getUnit(committee_id) {
        let data = committee_id ? { committee_ids: committee_id + '' } : {};
        return this.http(`/backend/api/checkArea`, "GET", { data: Object.assign({ type: 6 }, data) }, 'authority');
    }
    getStreet(name) {
        let data = name ? { name } : {};
        return this.http(`/backend/api/streetRoadList`, "GET", { data: Object.assign({}, data) }, 'authority');
    }
    getCommitte(committee_ids) {
        let id_string = '';
        let data = {};
        if (committee_ids) {
            committee_ids.forEach((e, i) => {
                if (i === 0) {
                    id_string = e + '';
                }
                else {
                    id_string = id_string + ',' + e;
                }
            });
        }
        if (id_string) {
            data = { committee_ids: id_string };
        }
        return this.http(`/backend/api/checkArea`, "GET", { data: Object.assign({ type: 4 }, data) }, 'authority');
    }
    getVillageCommitte(committee_ids) {
        let id_string = '';
        let data = {};
        if (committee_ids) {
            committee_ids.forEach((e, i) => {
                if (i === 0) {
                    id_string = e + '';
                }
                else {
                    id_string = id_string + ',' + e;
                }
            });
        }
        if (id_string) {
            data = { committee_ids: id_string };
        }
        return this.http(`/backend/api/checkArea`, "GET", { data: Object.assign({ type: 8 }, data) }, 'authority');
    }
    getComunity(committee_ids, subdistrict_id) {
        let id_string = '';
        committee_ids.forEach((e, i) => {
            if (i === 0) {
                id_string = e;
            }
            else {
                id_string = id_string + ',' + e;
            }
        });
        let data = {};
        data = subdistrict_id ? { subdistrict_id: subdistrict_id + '' } : {};
        return this.http(`/backend/api/checkArea`, "GET", { data: Object.assign({ type: 5, committee_ids: id_string }, data) }, 'authority');
    }
    getVillage(committee_ids, subdistrict_id) {
        let id_string = '';
        committee_ids.forEach((e, i) => {
            if (i === 0) {
                id_string = e;
            }
            else {
                id_string = id_string + ',' + e;
            }
        });
        let data = {};
        data = subdistrict_id ? { subdistrict_id: subdistrict_id + '' } : {};
        return this.http(`/backend/api/checkArea`, "GET", { data: Object.assign({ type: 5, committee_ids: id_string }, data) }, 'authority');
    }
    searchComunity(name) {
        return this.http(`/backend/api/checkArea`, "GET", { data: { type: 5, name: encodeURI(name) } }, 'authority');
    }
    searchVillage(name) {
        return this.http(`/backend/api/checkArea`, "GET", { data: { type: 5, name: encodeURI(name) } }, 'authority');
    }
    searchUnit(name) {
        return this.http(`/backend/api/checkArea`, "GET", { data: { type: 6, name: encodeURI(name) } }, 'authority');
    }
    getComunityPenalties(subdistrict_id) {
        return this.http('/backend/api/deductPointsConfig', "GET", { data: { type: 5, subdistrict_id } }, 'authority');
    }
    getVillagePenalties(subdistrict_id) {
        return this.http('/backend/api/deductPointsConfig', "GET", { data: { type: 8, subdistrict_id } }, 'authority');
    }
    getStreetPenalties() {
        return this.http('/backend/api/deductPointsConfig', "GET", { data: { type: 7 } }, 'authority');
    }
    getUnitPenalties(committee_id) {
        return this.http('/backend/api/deductPointsConfig', "GET", { data: { type: 6, committee_id } }, 'authority');
    }
    saveCurrentPenalties(patrolData) {
        return new Promise((resolve) => {
            wx.setStorageSync('patrolData_' + patrolData.type, patrolData);
            resolve(true);
        });
    }
    getCurrentPenalties(type) {
        return new Promise((resolve) => {
            resolve(wx.getStorageSync('patrolData_' + type));
        });
    }
    upDecutComunity(data) {
        return this.http('/backend/api/deductPointsAction', "POST", { data: Object.assign({}, data, { type: 5 }) }, 'authority');
    }
    upDecutVillage(data) {
        return this.http('/backend/api/deductPointsAction', "POST", { data: Object.assign({}, data, { type: 8 }) }, 'authority');
    }
    upDecutUnit(data) {
        return this.http('/backend/api/deductPointsAction', "POST", { data: Object.assign({}, data, { type: 6 }) }, 'authority');
    }
    uploadFile(tempUrl) {
        return new Promise((resolve, reject) => {
            if (tempUrl.indexOf('https://img.hxjbcdn.com') > -1) {
                let data = {
                    data: JSON.stringify({ resultList: [{ access_url: tempUrl }] })
                };
                resolve(data);
                return;
            }
            wx.uploadFile({
                url: 'https://api.51jiabo.com/file/v2.0/uploadImage',
                filePath: tempUrl,
                name: 'file',
                timeout: 5000,
                header: {
                    'Token': wx.getStorageSync('token'),
                    'content-type': 'multipart/form-data',
                    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',
                    'Access-Control-Allow-Method': 'GET, POST, OPTIONS',
                    'Access-Control-Allow-Origin': "*",
                },
                success(res) {
                    successHandle(res);
                    resolve(res);
                },
                fail(e) {
                    wx.showToast({
                        title: "上传图片失败",
                        icon: 'none',
                        duration: 2000
                    });
                    reject(e);
                }
            });
        });
    }
    uploadImgs(images) {
        return new Promise((resolve, reject) => {
            let index = 0;
            let last = images.length - 1;
            let picarr = [];
            wx.showLoading({ title: '上传中' });
            let up = () => {
                if (index <= last) {
                    this.uploadFile(images[index].url || images[index]).then((res) => {
                        picarr.push(JSON.parse(res.data).resultList[0].access_url);
                        index = index + 1;
                        up();
                    }, (err) => {
                        wx.hideLoading();
                        reject(err);
                    });
                }
                else {
                    wx.hideLoading();
                    resolve(picarr);
                }
            };
            up();
        });
    }
    getRecord(type) {
        let type2 = 0;
        type2 = this.typeHandle(type);
        return this.http(`/backend/api/UserPatrolList`, 'GET', { data: { type: type2 } }, "authority");
    }
    setPatrolType(type) {
        wx.setStorageSync('patrolType', type);
    }
    setRecordData(data) {
        wx.setStorageSync('recordData', data);
    }
    getAnalysisData(type) {
        let typeNumber = 0;
        typeNumber = this.typeHandle(type);
        return this.http('/backend/api/analysisData', "GET", { data: { type: typeNumber } }, 'authority');
    }
    setFeedbackType(type) {
        wx.setStorageSync('feedbackType', type);
    }
    getFeedbackList(upData) {
        let typeNumber = 0;
        let statusCode = 0;
        typeNumber = this.typeHandle(upData.type);
        switch (upData.status) {
            case 'all':
                statusCode = '';
                break;
            case 'pending':
                statusCode = 2;
                break;
            case 'notyet':
                statusCode = -1;
                break;
            case 'done':
                statusCode = 1;
                break;
            default:
                break;
        }
        upData.type = typeNumber;
        upData.pageSize = 10;
        upData.status = statusCode;
        console.log(upData);
        return this.http(`/backend/api/analysisList`, 'GET', { data: upData }, 'authority');
    }
    upFeedback(data) {
        return this.http('/backend/api/doActionFeedback', 'POST', { data: data }, 'authority');
    }
    newActivity(data) {
        return this.http(`/backend/api/activity/create`, 'POST', { data: data }, 'authority');
    }
    getSummary(type, page, size) {
        let typenumber = this.typeHandle(type);
        return this.http('/backend/xcx/questionRanking', 'GET', { data: { type: typenumber, page: page, pageSize: size } }, 'authority');
    }
    rectification(type) {
        let typenumber = this.typeHandle(type);
        return this.http('/backend/xcx/rectification', 'GET', { data: { type: typenumber } }, 'authority');
    }
    getRate(type) {
        let typenumber = this.typeHandle(type);
        return this.http('/backend/xcx/yield', 'GET', { data: { type: typenumber } }, 'authority');
    }
}
const api = new API;
exports.default = api;
//# sourceMappingURL=data:application/json;base64,