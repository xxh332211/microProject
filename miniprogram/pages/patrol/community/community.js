"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../service/net.service");
Page({
    data: {
        patrolType: 'new',
        record: {
            type: 'community',
            committee_id: 0,
            subdistrict_id: 0
        },
        totalPoint: 0,
        committee: [],
        community: [],
        penalties: [],
        position: '闵行区 梅陇镇',
        keyword: '',
        showSearchList: false,
        searchList: [],
        s_committee: {
            address: "",
            committee_id: "0",
            contacts: "    ",
            contacts_mobile: "     ",
            create_time: "",
            del_flag: "1",
            name: "请选择居委",
            type: "1",
        },
        s_community: {
            committee_id: "",
            name: "请选择小区",
            subdistrict_id: ""
        },
    },
    selectSearch(e) {
        let selected = e.currentTarget.dataset.item;
        console.log(selected);
        net_service_1.default.getCommitte([selected.committee_id]).then((res) => {
            this.setData({
                s_community: selected,
                s_committee: res.data.result[0],
                showSearchList: false,
                searchList: [],
                keyword: ''
            });
            this.getPenalties();
        });
    },
    beginSearch() {
        this.setData({
            showSearchList: true,
        });
        console.log(this.data.searchList);
    },
    cancleSearch() {
        this.setData({
            showSearchList: false,
            searchList: []
        });
    },
    search(e) {
        console.log(e);
        net_service_1.default.searchComunity(e.detail.value).then((res) => {
            console.log(res);
            this.setData({
                searchList: res.data.result
            });
        });
    },
    getPenalties() {
        net_service_1.default.getComunityPenalties(this.data.s_community.subdistrict_id).then((res) => {
            this.setData({
                penalties: res.data.result
            });
            this.calPoint();
        });
    },
    selectCommunity(e) {
        if (this.data.community.length < 1 || this.data.patrolType === 'record') {
            return;
        }
        const index = e.detail.value;
        this.setData({
            s_community: this.data.community[index]
        });
        this.getPenalties();
    },
    selectComunitee(e) {
        if (this.data.patrolType === 'record') {
            return;
        }
        const index = e.detail.value;
        this.setData({
            s_committee: this.data.committee[index],
            s_community: {
                committee_id: "",
                name: "请选择小区",
                subdistrict_id: ""
            }
        });
        this.setData({
            s_community: { committee_id: '', name: '请选择小区', subdistrict_id: '' },
            penalties: []
        });
        net_service_1.default.getComunity([this.data.s_committee.committee_id]).then((res) => {
            this.setData({
                community: res.data.result
            });
            if (this.data.community.length < 2) {
                this.setData({
                    s_community: this.data.community[0]
                });
                this.getPenalties();
            }
        });
    },
    scoring(e) {
        net_service_1.default.saveCurrentPenalties({
            type: "community",
            committee: this.data.committee,
            community: this.data.community,
            s_committee: this.data.s_committee,
            s_community: this.data.s_community,
            penalties: this.data.penalties
        }).then((res) => {
            if (res) {
                wx.setStorageSync('scoring_index', e.currentTarget.dataset.index);
                wx.navigateTo({ url: '/pages/patrol/community/scroring/scroring' });
            }
        });
    },
    remakeData() {
        let data = this.data.penalties;
        let newData = {
            point: this.data.totalPoint,
            subdistrict_id: this.data.s_community.subdistrict_id,
            content: []
        };
        data.forEach((element_1) => {
            let data_1 = {
                id: element_1.id,
                deduct_points: element_1.deduct_points,
                desc: element_1.desc,
                image_url: element_1.image_url,
                detail: []
            };
            element_1.detail.forEach((element_2) => {
                let data_2 = {
                    id: element_2.id,
                    deduct_points: element_2.deduct_points,
                    desc: element_2.desc,
                    image_url: element_2.image_url,
                    detail: []
                };
                element_2.detail.forEach((element_3) => {
                    let data_3 = {
                        id: element_3.id,
                        deduct_points: element_3.deduct_points,
                        desc: element_3.desc,
                        image_url: element_3.image_url,
                    };
                    data_2.detail.push(data_3);
                });
                data_1.detail.push(data_2);
            });
            newData.content.push(data_1);
        });
        return newData;
    },
    upDecut(e) {
        let _data = this.remakeData();
        net_service_1.default.upDecutComunity(_data).then((res) => {
            if (res.data.code === 200) {
                wx.showToast({
                    title: '提交打分成功',
                    icon: 'success',
                    duration: 2000
                }).then((res) => {
                    setTimeout(() => { wx.navigateBack(); }, 2000);
                });
            }
        });
    },
    calPoint() {
        if (this.data.penalties.length < 1) {
            return;
        }
        let total = 0;
        let dedcut = 0;
        this.data.penalties.forEach((ele) => {
            total = ele.point / 1 + total;
            dedcut = ele.deduct_points / 1 + dedcut;
        });
        total = total - dedcut;
        this.setData({
            totalPoint: total
        });
    },
    newPatrolInit() {
        net_service_1.default.getCurrentPenalties('community').then((res) => {
            if (res) {
                this.setData(res);
                this.calPoint();
            }
            else {
                net_service_1.default.getCommitte().then((res) => {
                    this.setData({
                        committee: res.data.result
                    });
                });
            }
        });
    },
    historyInit() {
        this.setData({
            record: wx.getStorageSync('recordData')
        });
        net_service_1.default.getCurrentPenalties('community').then((res) => {
            if (res) {
                this.setData(res);
                this.calPoint();
            }
            else {
                net_service_1.default.getCommitte([this.data.record.committee_id]).then((res) => {
                    this.setData({
                        s_committee: res.data.result[0]
                    });
                });
                net_service_1.default.getComunity([this.data.record.committee_id + ''], this.data.record.subdistrict_id).then((res) => {
                    this.setData({
                        s_community: res.data.result[0]
                    });
                    this.getPenalties();
                });
            }
        });
    },
    onLoad() {
    },
    onReady() {
    },
    onShow() {
        this.setData({
            patrolType: wx.getStorageSync('patrolType')
        });
        if (this.data.patrolType === "new") {
            this.newPatrolInit();
        }
        else {
            this.historyInit();
        }
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        console.log(opts.target);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,