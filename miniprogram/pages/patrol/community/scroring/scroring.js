"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../../service/net.service");
let interval = null;
Page({
    scoreList: {},
    data: {
        patrolData: {},
        scoring: {},
        scoring_index: 0,
    },
    bindKeyInput(e) {
        clearInterval(interval);
        interval = setTimeout(() => {
            let temp = this.data.scoring;
            let deduct_points = e.detail.value / 1;
            temp.detail[e.currentTarget.dataset.index].detail[e.currentTarget.dataset.i].deduct_points = deduct_points;
            this.setData({
                scoring: temp
            });
        }, 1000);
    },
    calcula(sub) {
        let total = sub.deduct_points / 1;
        sub.detail.forEach((element) => {
            total = element.deduct_points / 1 + total;
        });
        return total;
    },
    init() {
        net_service_1.default.getCurrentPenalties("community").then((res) => {
            this.setData({
                patrolData: res
            });
            this.setData({
                scoring_index: wx.getStorageSync('scoring_index'),
            });
            let scoring = this.data.patrolData.penalties[this.data.scoring_index];
            scoring.detail.forEach((element) => {
                element.deduct_points = 0;
            });
            scoring.deduct_points = 0;
            this.setData({
                scoring: scoring
            });
            console.log(this.data);
        });
    },
    onRemoveImgTap(e) {
        console.log(e, 'delete');
        let images = e.detail.all;
        let index = e.currentTarget.dataset.index;
        let scoring = this.data.scoring;
        scoring.detail[index].image_url = images;
        this.setData({
            scoring: scoring
        });
        console.log(this.data.scoring);
    },
    uploadImgs(images) {
        return new Promise((resolve) => {
        });
        console.log(images);
    },
    onImgChangeTap(e) {
        console.log(e);
        let images = e.detail.current;
        let scoring = this.data.scoring;
        let index = e.currentTarget.dataset.index;
        net_service_1.default.uploadImgs(images).then((res) => {
            scoring.detail[index].image_url = [...scoring.detail[index].image_url, ...res];
            this.setData({
                scoring: scoring
            });
        }, (err) => {
            this.setData({
                scoring: scoring
            });
        });
    },
    textInput(e) {
        let text = e.detail.value;
        let index = e.currentTarget.dataset.index;
        let scoring = this.data.scoring;
        scoring.detail[index].desc = text;
        this.setData({
            scoring: scoring
        });
    },
    check() {
        let flag = true;
        let scoring = this.data.scoring;
        scoring.detail.forEach((element) => {
            if (element.deduct_points > 0 && element.image_url.length < 1) {
                flag = false;
            }
        });
        if (!flag) {
            wx.showToast({
                title: '请为扣分项上传图片',
                icon: 'none',
                duration: 2000
            });
        }
        return flag;
    },
    calPoit() {
        let scoring = this.data.scoring;
        scoring.detail.forEach((element) => {
            element.deduct_points = 0;
            element.deduct_points = this.calcula(element);
        });
        scoring.deduct_points = 0;
        scoring.deduct_points = this.calcula(scoring);
        this.setData({
            scoring: scoring
        });
    },
    save(e) {
        wx.showLoading({
            title: '提交中'
        });
        this.calPoit();
        let canSave = this.check();
        if (!canSave) {
            return;
        }
        let patrolData = this.data.patrolData;
        patrolData['penalties'][this.data.scoring_index] = this.data.scoring;
        net_service_1.default.saveCurrentPenalties(patrolData).then((res) => {
            wx.removeStorageSync('scoring_index');
            wx.hideLoading();
            wx.navigateBack();
        });
    },
    onLoad() {
        wx.showLoading({ title: '加载中' });
        this.init();
    },
    onReady() {
    },
    onShow() {
        wx.hideLoading();
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        console.log(opts.target);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,