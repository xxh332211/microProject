"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../service/net.service");
Page({
    data: {
        mainData: {},
        user: {},
        phoneNumber: '',
        show: false,
        isShow: false
    },
    go(e) {
        wx.navigateTo({ url: e.currentTarget.dataset.url });
    },
    getData() {
        net_service_1.default.getAnalysisData().then((res) => {
            this.setData({
                user: wx.getStorageSync('user'),
                mainData: res.data.result[0]
            });
        });
    },
    handleInputChange(e) {
        let _this = this;
        let dataset = e.currentTarget.dataset;
        let value = e.detail.value;
        let phoneNumber = dataset.phoneNumber;
        _this.data.phoneNumber = value;
        _this.setData({
            phoneNumber: _this.data.phoneNumber
        });
    },
    bindPhone() {
        let data = {
            mobile: this.data.phoneNumber
        };
        console.log('xxxxx', data);
        net_service_1.default.iptPhone(data).then((res) => {
            console.log('绑定成功', res);
            this.setData({
                show: true
            });
        });
    },
    onLoad() {
        this.getData();
        net_service_1.default.getPhoneNumber().then((res) => {
            console.log('是否绑定手机号', res);
            if (res.data.code === 200) {
                this.setData({
                    isShow: true
                });
                console.log('用户需要授权绑定手机');
            }
        });
    },
    onReady() {
    },
    onShow() {
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        console.log(opts.target);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5Vc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRtaW5Vc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQTRDO0FBRTVDLElBQUksQ0FBQztJQUtILElBQUksRUFBRTtRQUNKLFFBQVEsRUFBTSxFQUFFO1FBQ2hCLElBQUksRUFBTSxFQUFFO1FBQ1osV0FBVyxFQUFFLEVBQUU7UUFDZixJQUFJLEVBQUUsS0FBSztRQUNYLE1BQU0sRUFBRSxLQUFLO0tBQ2Q7SUFDRCxFQUFFLENBQUMsQ0FBSztRQUVOLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBQ0QsT0FBTztRQUNMLHFCQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBTyxFQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxJQUFJLEVBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7Z0JBQzlCLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDN0IsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsaUJBQWlCLENBQUMsQ0FBTTtRQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxPQUFPLEdBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDdkMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNaLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVc7U0FDcEMsQ0FBQyxDQUFBO0lBSUosQ0FBQztJQUNELFNBQVM7UUFFUCxJQUFJLElBQUksR0FBRztZQUNULE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7U0FDOUIsQ0FBQTtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNCLHFCQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsSUFBSSxFQUFDLElBQUk7YUFDVixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFJRCxNQUFNO1FBQ0osSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YscUJBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1QixJQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxNQUFNLEVBQUUsSUFBSTtpQkFDYixDQUFDLENBQUE7Z0JBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUtELE9BQU87SUFFUCxDQUFDO0lBS0QsTUFBTTtJQUVOLENBQUM7SUFLRCxNQUFNO0lBRU4sQ0FBQztJQUtELFFBQVE7SUFFUixDQUFDO0lBS0QsaUJBQWlCO0lBRWpCLENBQUM7SUFLRCxhQUFhO0lBRWIsQ0FBQztJQUtELGlCQUFpQixDQUFDLElBQVE7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEIsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tICcuLi8uLi9zZXJ2aWNlL25ldC5zZXJ2aWNlJztcclxuXHJcblBhZ2Uoe1xyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cclxuICAgKi9cclxuICBkYXRhOiB7XHJcbiAgICBtYWluRGF0YTo8YW55Pnt9LFxyXG4gICAgdXNlcjo8YW55Pnt9LFxyXG4gICAgcGhvbmVOdW1iZXI6ICcnLFxyXG4gICAgc2hvdzogZmFsc2UsXHJcbiAgICBpc1Nob3c6IGZhbHNlXHJcbiAgfSxcclxuICBnbyhlOmFueSl7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC51cmwpXHJcbiAgICB3eC5uYXZpZ2F0ZVRvKHt1cmw6ZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudXJsfSlcclxuICB9LFxyXG4gIGdldERhdGEgKCkge1xyXG4gICAgYXBpLmdldEFuYWx5c2lzRGF0YSgpLnRoZW4oKHJlczphbnkpPT57XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgdXNlcjp3eC5nZXRTdG9yYWdlU3luYygndXNlcicpLFxyXG4gICAgICAgIG1haW5EYXRhOiByZXMuZGF0YS5yZXN1bHRbMF1cclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfSxcclxuICBoYW5kbGVJbnB1dENoYW5nZShlOiBhbnkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgZGF0YXNldCAgPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcclxuICAgIGxldCB2YWx1ZSA9IGUuZGV0YWlsLnZhbHVlO1xyXG4gICAgbGV0IHBob25lTnVtYmVyID0gZGF0YXNldC5waG9uZU51bWJlcjtcclxuICAgIF90aGlzLmRhdGEucGhvbmVOdW1iZXIgPSB2YWx1ZTtcclxuICAgIF90aGlzLnNldERhdGEoe1xyXG4gICAgICBwaG9uZU51bWJlcjogX3RoaXMuZGF0YS5waG9uZU51bWJlclxyXG4gICAgfSlcclxuICAgIC8vIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAvLyAgIFtlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wcm9wXTogZS5kZXRhaWwudmFsdWVcclxuICAgIC8vIH0pXHJcbiAgfSxcclxuICBiaW5kUGhvbmUoKSB7XHJcbiAgICAvLyBsZXQgcGhvbmUgPSBwYXJzZUludCh0aGlzLmRhdGEucGhvbmUpO1xyXG4gICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgIG1vYmlsZTogdGhpcy5kYXRhLnBob25lTnVtYmVyXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZygneHh4eHgnLCBkYXRhKTtcclxuICAgIC8vIHJldHVybjtcclxuICAgIGFwaS5pcHRQaG9uZShkYXRhKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ+e7keWumuaIkOWKnycsIHJlcyk7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgc2hvdzp0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cclxuICAgKi9cclxuICBvbkxvYWQoKSB7XHJcbiAgICB0aGlzLmdldERhdGEoKTtcclxuICAgIGFwaS5nZXRQaG9uZU51bWJlcigpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfmmK/lkKbnu5HlrprmiYvmnLrlj7cnLCByZXMpO1xyXG4gICAgICBpZihyZXMuZGF0YS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgaXNTaG93OiB0cnVlXHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb25zb2xlLmxvZygn55So5oi36ZyA6KaB5o6I5p2D57uR5a6a5omL5py6Jyk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcclxuICAgKi9cclxuICBvblJlYWR5KCkge1xyXG4gICAgXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcclxuICAgKi9cclxuICBvblNob3coKSB7XHJcbiAgICBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdoumakOiXj1xyXG4gICAqL1xyXG4gIG9uSGlkZSgpIHtcclxuICAgIFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XHJcbiAgICovXHJcbiAgb25VbmxvYWQoKSB7XHJcbiAgICBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLnm7jlhbPkuovku7blpITnkIblh73mlbAtLeebkeWQrOeUqOaIt+S4i+aLieWKqOS9nFxyXG4gICAqL1xyXG4gIG9uUHVsbERvd25SZWZyZXNoKCkge1xyXG4gICAgXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i5LiK5ouJ6Kem5bqV5LqL5Lu255qE5aSE55CG5Ye95pWwXHJcbiAgICovXHJcbiAgb25SZWFjaEJvdHRvbSgpIHtcclxuICAgIFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xyXG4gICAqL1xyXG4gIG9uU2hhcmVBcHBNZXNzYWdlKG9wdHM6YW55KTogV2VjaGF0TWluaXByb2dyYW0uUGFnZS5JQ3VzdG9tU2hhcmVDb250ZW50IHtcclxuICAgIGNvbnNvbGUubG9nKG9wdHMudGFyZ2V0KVxyXG4gICAgcmV0dXJuIHt9XHJcbiAgfVxyXG59KSJdfQ==