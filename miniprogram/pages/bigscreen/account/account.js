"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../service/net.service");
Page({
    data: {
        current: 'all',
        loading: true,
        show: false,
        updata: {
            waste_dry: '',
            waste_wet: '',
            waste_recyclabl: '',
            waste_architecture: '',
            waste_harmful: '',
            departure_time: '选择日期',
            time: '选择时间'
        },
        dataObj: {
            waste_glass: '',
            waste_plastic: '',
            waste_wood: '',
            waste_paper: '',
            waste_electronic: '',
            waste_clothes: '',
            waste_metal: '',
            waste_other: '',
            departure_time: '选择日期',
            time: '选择时间'
        }
    },
    tap(e) {
        this.setData({
            current: e.currentTarget.dataset.type
        });
    },
    inputform(e) {
        let key = e.currentTarget.dataset.key;
        let updata = this.data.updata;
        updata[key] = e.detail.currentKey || e.detail.value;
        this.setData({
            updata: updata
        });
    },
    inputform2(e) {
        let key = e.currentTarget.dataset.key;
        let dataObj = this.data.dataObj;
        dataObj[key] = e.detail.currentKey || e.detail.value;
        this.setData({
            dataObj: dataObj
        });
    },
    submit() {
        if (this.data.current === "all") {
            console.log(this.data.updata);
            net_service_1.default.newAccount(this.data.updata).then(res => {
                this.setData({ show: true });
            });
            console.log('哈哈哈哈');
        }
        else {
            console.log(this.data.dataObj);
            net_service_1.default.newAccount2(this.data.dataObj).then(res => {
                this.setData({ show: true });
            });
            console.log('哈哈哈哈');
        }
    },
    onLoad() {
        wx.lin.initValidateForm(this);
    },
    onReady() {
    },
    onShow() {
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        console.log(opts.target);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,