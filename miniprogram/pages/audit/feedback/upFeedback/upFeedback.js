"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../../service/net.service");
Page({
    data: {
        feedbackType: '',
        feedback: '',
        image_url: [],
        category_id: '',
        defuct_id: '',
        data: {
            audit_status: null,
            category_id: "",
            committee_name: "",
            create_time: "",
            desc: "",
            feedback: "",
            feedback_image_url: [],
            feedback_time: null,
            id: "",
            image_url: [],
            infozc_name: "",
            is_improve: "",
            is_overtime: "",
            point: "",
            real_name: "",
            status: 1,
            subdistrict_name: "",
        }
    },
    init() {
        this.setData({
            feedbackType: wx.getStorageSync('feedbackType'),
            defuct_id: wx.getStorageSync('defuct_id'),
            category_id: wx.getStorageSync('category_id')
        });
    },
    textInput(e) {
        let text = e.detail.value;
        this.setData({
            feedback: text
        });
    },
    onRemoveImgTap(e) {
        let images = e.detail.all;
        this.setData({
            image_url: images
        });
    },
    onImgChangeTap(e) {
        let images = e.detail.current;
        let image_url = this.data.image_url;
        net_service_1.default.uploadImgs(images).then((res) => {
            image_url = [...image_url, ...res];
            this.setData({
                image_url: image_url,
            });
        }, (err) => {
            this.setData({
                image_url: image_url,
            });
        });
    },
    getData() {
        wx.hideLoading();
        wx.showLoading({ title: "加载中" });
        let data = {
            type: this.data.feedbackType,
            status: 'all',
            page: 1,
            defuct_id: this.data.defuct_id,
            category_id: this.data.category_id
        };
        console.log(data);
        net_service_1.default.getFeedbackList(data).then((res) => {
            wx.hideLoading();
            this.setData({
                data: res.data.result[0],
                image_url: res.data.result[0].feedback_image_url,
                feedback: res.data.result[0].feedback,
            });
        });
    },
    previewImg(e) {
        let urls = e.currentTarget.dataset.urls;
        let index = e.currentTarget.dataset.index;
        let sources = [];
        urls.forEach((element) => {
            sources.push({ url: element });
        });
        wx.previewMedia({ sources: sources, current: index });
    },
    upload() {
        let data = {
            feedback: this.data.feedback,
            image_url: this.data.image_url,
            category_id: this.data.category_id,
            defuct_id: this.data.defuct_id,
        };
        console.log(data);
        net_service_1.default.upFeedback(data).then((res) => {
            console.log(res);
            wx.showToast({
                title: res.data.message,
                icon: 'success',
                duration: 2000
            }).then(() => {
                wx.navigateBack();
            });
        });
    },
    onLoad() {
        this.init();
        wx.setNavigationBarColor({ backgroundColor: '#FF625D', frontColor: '#ffffff' });
        this.getData();
    },
    onReady() {
    },
    onShow() {
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        console.log(opts.target);
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,