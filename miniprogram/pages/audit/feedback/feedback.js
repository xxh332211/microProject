"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../service/net.service");
Page({
    data: {
        current: 'all',
        keyword: '',
        feedbackType: '',
        list: [],
        height: '',
        page: 1,
        total: 0,
        startDate: '',
        endDate: '',
        user: {}
    },
    scroll() {
        let totalPage = Math.ceil(this.data.total / 10);
        if (this.data.page >= totalPage) {
            return;
        }
        this.setData({
            page: this.data.page + 1
        });
        this.getList();
    },
    tap(e) {
        this.setData({
            current: e.currentTarget.dataset.type,
            keyword: '',
            page: 1
        });
        this.getList('reset');
    },
    getList(reset) {
        let data = {
            type: this.data.feedbackType,
            status: this.data.current,
            page: this.data.page,
            name: this.data.keyword,
            begin_create_date: this.data.startDate,
            end_create_date: this.data.endDate
        };
        net_service_1.default.getFeedbackList(data).then((res) => {
            if (reset) {
                this.setData({
                    list: res.data.result,
                    total: res.data.params.total
                });
            }
            else {
                this.setData({
                    list: [...this.data.list, ...res.data.result],
                    total: res.data.params.total
                });
            }
        });
    },
    previewImg(e) {
        let urls = e.currentTarget.dataset.urls;
        let index = e.currentTarget.dataset.index;
        let sources = [];
        urls.forEach((element) => {
            sources.push({ url: element });
        });
        wx.previewMedia({ sources: sources, current: index });
    },
    clear() {
        this.setData({
            keyword: ''
        });
        this.getList('reset');
    },
    search(e) {
        this.setData({
            keyword: e.detail.value
        });
        this.getList('reset');
    },
    goUpfeedback(e) {
        console.log(e);
        wx.setStorageSync('category_id', e.currentTarget.dataset.category_id);
        wx.setStorageSync('defuct_id', e.currentTarget.dataset.defuct_id);
        wx.navigateTo({ url: '/pages/audit/feedback/upFeedback/upFeedback' });
    },
    startChange(e) {
        let startDate = e.detail.currentKey || e.detail.value;
        this.setData({ startDate: startDate });
    },
    endChange(e) {
        let endDate = e.detail.currentKey || e.detail.value;
        this.setData({ endDate: endDate });
    },
    onLoad() {
        wx.setNavigationBarColor({ backgroundColor: '#FF625D', frontColor: '#ffffff' });
    },
    onReady() {
    },
    onShow() {
        this.setData({
            user: wx.getStorageSync('user')
        });
        this.setData({
            feedbackType: wx.getStorageSync('feedbackType')
        });
        this.setData({
            page: 1
        });
        this.getList('reset');
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,