"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../service/net.service");
Page({
    data: {
        current: 'all',
        keyword: '',
        feedbackType: '',
        list: [],
        height: '',
        page: 1,
        total: 0,
        user: {}
    },
    scroll() {
        let totalPage = Math.ceil(this.data.total / 10);
        if (this.data.page >= totalPage) {
            return;
        }
        this.setData({
            page: this.data.page + 1
        });
        this.getList();
    },
    tap(e) {
        this.setData({
            current: e.currentTarget.dataset.type,
            keyword: '',
            page: 1
        });
        this.getList('reset');
    },
    getList(reset) {
        let data = {
            type: this.data.feedbackType,
            status: this.data.current,
            page: this.data.page,
            name: this.data.keyword
        };
        net_service_1.default.getFeedbackList(data).then((res) => {
            if (reset) {
                this.setData({
                    list: res.data.result,
                    total: res.data.params.total
                });
            }
            else {
                this.setData({
                    list: [...this.data.list, ...res.data.result],
                    total: res.data.params.total
                });
            }
        });
    },
    previewImg(e) {
        let urls = e.currentTarget.dataset.urls;
        let index = e.currentTarget.dataset.index;
        let sources = [];
        urls.forEach((element) => {
            sources.push({ url: element });
        });
        wx.previewMedia({ sources: sources, current: index });
    },
    clear() {
        this.setData({
            keyword: ''
        });
        this.getList('reset');
    },
    search(e) {
        this.setData({
            keyword: e.detail.value
        });
        this.getList('reset');
    },
    goUpfeedback(e) {
        console.log(e);
        wx.setStorageSync('category_id', e.currentTarget.dataset.category_id);
        wx.setStorageSync('defuct_id', e.currentTarget.dataset.defuct_id);
        wx.navigateTo({ url: '/pages/audit/feedback/upFeedback/upFeedback' });
    },
    onLoad() {
        wx.setNavigationBarColor({ backgroundColor: '#FF625D', frontColor: '#ffffff' });
    },
    onReady() {
    },
    onShow() {
        this.setData({
            user: wx.getStorageSync('user')
        });
        this.setData({
            feedbackType: wx.getStorageSync('feedbackType')
        });
        this.setData({
            page: 1
        });
        this.getList('reset');
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVlZGJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZWVkYmFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhEQUErQztBQUUvQyxJQUFJLENBQUM7SUFLSCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQW1DLEtBQUs7UUFDL0MsT0FBTyxFQUFDLEVBQUU7UUFDVixZQUFZLEVBQVUsRUFBRTtRQUN4QixJQUFJLEVBQU0sRUFBRTtRQUNaLE1BQU0sRUFBQyxFQUFFO1FBQ1QsSUFBSSxFQUFDLENBQUM7UUFDTixLQUFLLEVBQUMsQ0FBQztRQUNQLElBQUksRUFBTSxFQUFFO0tBQ2I7SUFDRCxNQUFNO1FBQ0osSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM3QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRTtZQUMvQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsSUFBSSxFQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7U0FDMUIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFDRCxHQUFHLENBQUUsQ0FBSztRQUNSLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUNyQyxPQUFPLEVBQUMsRUFBRTtZQUNWLElBQUksRUFBRSxDQUFDO1NBQ1IsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN2QixDQUFDO0lBQ0QsT0FBTyxDQUFFLEtBQWM7UUFDckIsSUFBSSxJQUFJLEdBQUc7WUFDVCxJQUFJLEVBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZO1lBQ3JDLE1BQU0s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QyxFQUFFLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztTQUMvQyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsSUFBSSxFQUFDLENBQUM7U0FDUCxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFLRCxNQUFNO0lBRU4sQ0FBQztJQUtELFFBQVE7SUFFUixDQUFDO0lBS0QsaUJBQWlCO0lBRWpCLENBQUM7SUFLRCxhQUFhO0lBRWIsQ0FBQztJQUtELGlCQUFpQixDQUFDLElBQUk7UUFDcEIsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL25ldC5zZXJ2aWNlJztcclxuaW1wb3J0IHttYWluVHlwZX0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9uZXQuc2VydmljZSdcclxuUGFnZSh7XHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxyXG4gICAqL1xyXG4gIGRhdGE6IHtcclxuICAgIGN1cnJlbnQ6IDwnYWxsJ3wnZG9uZSd8J3BlbmRpbmcnfCdub3R5ZXQnPidhbGwnLFxyXG4gICAga2V5d29yZDonJyxcclxuICAgIGZlZWRiYWNrVHlwZTogPHN0cmluZz4nJyxcclxuICAgIGxpc3Q6PGFueT5bXSxcclxuICAgIGhlaWdodDonJyxcclxuICAgIHBhZ2U6MSxcclxuICAgIHRvdGFsOjAsXHJcbiAgICB1c2VyOjxhbnk+e31cclxuICB9LFxyXG4gIHNjcm9sbCAoKSB7XHJcbiAgICBsZXQgdG90YWxQYWdlID0gTWF0aC5jZWlsKHRoaXMuZGF0YS50b3RhbC8xMClcclxuICAgIGlmICh0aGlzLmRhdGEucGFnZSA+PSB0b3RhbFBhZ2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgcGFnZSA6IHRoaXMuZGF0YS5wYWdlICsgMVxyXG4gICAgfSlcclxuICAgIHRoaXMuZ2V0TGlzdCgpXHJcbiAgfSxcclxuICB0YXAgKGU6YW55KSB7XHJcbiAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICBjdXJyZW50OiBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlLFxyXG4gICAgICBrZXl3b3JkOicnLFxyXG4gICAgICBwYWdlOiAxXHJcbiAgICB9KVxyXG4gICAgdGhpcy5nZXRMaXN0KCdyZXNldCcpXHJcbiAgfSxcclxuICBnZXRMaXN0IChyZXNldD86J3Jlc2V0Jykge1xyXG4gICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgIHR5cGU6PG1haW5UeXBlPnRoaXMuZGF0YS5mZWVkYmFja1R5cGUsXHJcbiAgICAgIHN0YXR1czp0aGlzLmRhdGEuY3VycmVudCxcclxuICAgICAgcGFnZTp0aGlzLmRhdGEucGFnZSxcclxuICAgICAgbmFtZTp0aGlzLmRhdGEua2V5d29yZFxyXG4gICAgfVxyXG4gICAgYXBpLmdldEZlZWRiYWNrTGlzdChkYXRhKS50aGVuKChyZXM6YW55KT0+e1xyXG4gICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgbGlzdDpyZXMuZGF0YS5yZXN1bHQsXHJcbiAgICAgICAgICB0b3RhbDogcmVzLmRhdGEucGFyYW1zLnRvdGFsXHJcbiAgICAgICAgfSlcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICBsaXN0OiBbLi4udGhpcy5kYXRhLmxpc3QsLi4ucmVzLmRhdGEucmVzdWx0XSxcclxuICAgICAgICAgIHRvdGFsOiByZXMuZGF0YS5wYXJhbXMudG90YWxcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSlcclxuICB9LFxyXG4gIHByZXZpZXdJbWcgKGU6YW55KSB7XHJcbiAgICBsZXQgdXJscyA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnVybHM7XHJcbiAgICBsZXQgaW5kZXggPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcclxuICAgIGxldCBzb3VyY2VzID0gPGFueT5bXVxyXG4gICAgdXJscy5mb3JFYWNoKChlbGVtZW50OmFueSkgPT4ge1xyXG4gICAgICBzb3VyY2VzLnB1c2goe3VybDogZWxlbWVudH0pXHJcbiAgICB9KTtcclxuICAgIHd4LnByZXZpZXdNZWRpYSh7c291cmNlczpzb3VyY2VzLGN1cnJlbnQ6aW5kZXh9KVxyXG4gIH0sXHJcbiAgY2xlYXIoKXtcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGtleXdvcmQ6JydcclxuICAgIH0pXHJcbiAgICB0aGlzLmdldExpc3QoJ3Jlc2V0JylcclxuICB9LFxyXG4gIHNlYXJjaCAoZTphbnkpIHtcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGtleXdvcmQ6ZS5kZXRhaWwudmFsdWVcclxuICAgIH0pXHJcbiAgICB0aGlzLmdldExpc3QoJ3Jlc2V0JylcclxuICB9LFxyXG4gIGdvVXBmZWVkYmFjayhlOmFueSl7XHJcbiAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgd3guc2V0U3RvcmFnZVN5bmMoJ2NhdGVnb3J5X2lkJyxlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYXRlZ29yeV9pZClcclxuICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdkZWZ1Y3RfaWQnLGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmRlZnVjdF9pZClcclxuICAgIHd4Lm5hdmlnYXRlVG8oe3VybDonL3BhZ2VzL2F1ZGl0L2ZlZWRiYWNrL3VwRmVlZGJhY2svdXBGZWVkYmFjayd9KVxyXG4gIH0sXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cclxuICAgKi9cclxuICBvbkxvYWQoKSB7XHJcbiAgICB3eC5zZXROYXZpZ2F0aW9uQmFyQ29sb3Ioe2JhY2tncm91bmRDb2xvcjonI0ZGNjI1RCcsZnJvbnRDb2xvcjonI2ZmZmZmZid9KVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXHJcbiAgICovXHJcbiAgb25SZWFkeSgpIHtcclxuICAgIFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5pi+56S6XHJcbiAgICovXHJcbiAgb25TaG93KCkge1xyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgdXNlcjogd3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXInKVxyXG4gICAgfSlcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGZlZWRiYWNrVHlwZTp3eC5nZXRTdG9yYWdlU3luYygnZmVlZGJhY2tUeXBlJylcclxuICAgIH0pXHJcbiAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICBwYWdlOjFcclxuICAgIH0pXHJcbiAgICB0aGlzLmdldExpc3QoJ3Jlc2V0Jyk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cclxuICAgKi9cclxuICBvbkhpZGUoKSB7XHJcbiAgICBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxyXG4gICAqL1xyXG4gIG9uVW5sb2FkKCkge1xyXG4gICAgXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcclxuICAgKi9cclxuICBvblB1bGxEb3duUmVmcmVzaCgpIHtcclxuICAgIFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxyXG4gICAqL1xyXG4gIG9uUmVhY2hCb3R0b20oKSB7XHJcbiAgICBcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcclxuICAgKi9cclxuICBvblNoYXJlQXBwTWVzc2FnZShvcHRzKTogV2VjaGF0TWluaXByb2dyYW0uUGFnZS5JQ3VzdG9tU2hhcmVDb250ZW50IHtcclxuICAgIHJldHVybiB7fVxyXG4gIH1cclxufSkiXX0=