"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../service/net.service");
Page({
    data: {
        mainData: {},
        dataPoints: {},
        current: 'community',
        user: {},
        date: '',
        wxcode: '',
        isShow: false,
        phoneNumber: '',
        show: false
    },
    tap(e) {
        this.setData({
            current: e.currentTarget.dataset.type
        });
        this.getMainData();
        console.log(this.data.current);
        this.getData();
    },
    goFeedback() {
        net_service_1.default.setFeedbackType(this.data.current);
        setTimeout(() => {
            wx.navigateTo({ url: '/pages/audit/feedback/feedback' });
        }, 100);
    },
    goReport() {
        net_service_1.default.setFeedbackType(this.data.current);
        let that = this;
        setTimeout(() => {
            wx.navigateTo({
                url: '/pages/audit/report/report',
                success: function (res) {
                    let data = that.data.current ? that.data.current : 'community';
                    res.eventChannel.emit("currentInfo", data);
                }
            });
        }, 100);
    },
    getMainData() {
        net_service_1.default.getAnalysisData(this.data.current).then((res) => {
            this.setData({
                mainData: res.data.result[0]
            });
        });
    },
    getData() {
        net_service_1.default.getPoints(this.data.current).then((res) => {
            this.setData({
                dataPoints: res.data.result
            });
        });
    },
    userInit() {
        this.setData({
            user: wx.getStorageSync('user')
        });
        switch (this.data.user.type) {
            case '6':
                this.setData({
                    current: 'unit'
                });
                break;
            case '8':
                this.setData({
                    current: 'village'
                });
                break;
            case '9':
                this.setData({
                    current: 'village'
                });
                break;
            default:
                break;
        }
    },
    getPhoneNumber: function (e) {
        if (e.detail.userInfo) {
            console.log("用户的信息如下：", e);
            let data = {
                wxcode: this.data.wxcode,
                encryptedData: e.detail.encryptedData,
                offset: e.detail.iv
            };
            console.log(data);
        }
        else {
            wx.showModal({
                title: '警告',
                content: '您点击了拒绝授权，将无法进入小程序，请授权之后再进入!!!',
                showCancel: false,
                confirmText: '返回授权',
                success: function (res) {
                    if (res.confirm) {
                        console.log('用户点击了“返回授权”');
                    }
                }
            });
        }
    },
    handleInputChange(e) {
        let _this = this;
        let dataset = e.currentTarget.dataset;
        let value = e.detail.value;
        let phoneNumber = dataset.phoneNumber;
        _this.data.phoneNumber = value;
        _this.setData({
            phoneNumber: _this.data.phoneNumber
        });
    },
    bindPhone() {
        let data = {
            mobile: this.data.phoneNumber
        };
        console.log('mobile', data);
        net_service_1.default.iptPhone(data).then(() => {
            this.setData({
                show: true
            });
        }).catch((err) => {
            console.log('err', err);
            this.setData({
                isShow: true
            });
        });
    },
    onLoad() {
        net_service_1.default.getPhoneNumber().then((res) => {
            console.log('是否绑定手机号', res);
            if (res && res.data.code === 200) {
                this.setData({
                    isShow: true
                });
                console.log('用户需要授权绑定手机');
            }
        });
    },
    onReady() {
    },
    onShow() {
        this.setData({
            date: net_service_1.default.getDate()
        });
        this.userInit();
        this.getMainData();
        this.getData();
    },
    onHide() {
    },
    onUnload() {
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage(opts) {
        return {};
    }
});
//# sourceMappingURL=data:application/json;base64,