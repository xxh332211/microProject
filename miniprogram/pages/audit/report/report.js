"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_service_1 = require("../../../service/net.service");
Page({
    data: {
        dataObj: [],
        current: 'community',
        pagenum: 1,
    },
    tap(e) {
        this.setData({
            current: e.currentTarget.dataset.type
        });
        this.getDataObjt();
    },
    getDataObjt() {
        let data = {
            type: this.data.current,
            page: this.data.pagenum,
            pageSize: 25
        };
        net_service_1.default.getReportData((data)).then((res) => {
            console.log('数据', res);
            res.data.result.map((item) => {
                let time = item.create_time.substring(0, 10);
                return item.create_time = time.replace(/-/g, "/");
            });
            var arr1 = this.data.dataObj;
            var arr2 = res.data.result;
            arr1 = arr1.concat(arr2);
            this.setData({
                dataObj: arr1
            });
        });
    },
    onLoad() {
        let that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on("currentInfo", function (data) {
            console.log(data);
            that.setData({
                current: data
            });
        });
        setTimeout(() => {
            this.getDataObjt();
        }, 100);
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
        var that = this;
        var pagenum = that.data.pagenum + 1;
        console.log(that.data.pagenum, 'onReachBottom');
        this.setData({
            pagenum: pagenum,
        });
        this.getDataObjt();
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsOERBQStDO0FBRS9DLElBQUksQ0FBQztJQUtILElBQUksRUFBRTtRQUNKLE9BQU8sRUFBTSxFQUFFO1FBQ2YsT0FBTyxFQUFZLFdBQVc7UUFDOUIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELEdBQUcsQ0FBRSxDQUFLO1FBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQ3RDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxHQUFHO1lBRVQsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ3ZCLFFBQVEsRUFBRSxFQUFFO1NBQ2IsQ0FBQTtRQUNELHFCQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFPLEVBQUMsRUFBRTtZQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFRLEVBQUUsRUFBRTtnQkFFL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM1QyxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkQsQ0FBQyxDQUFDLENBQUE7WUFDRixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM3QixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBS0QsTUFBTTtRQUNKLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUVsRCxZQUFZLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxVQUFTLElBQUk7WUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSCxVQUFVLENBQUMsR0FBRSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JCLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQTtJQUNSLENBQUM7SUFLRCxRQUFRLEVBQUU7SUFFVixDQUFDO0lBS0QsaUJBQWlCLEVBQUU7SUFFbkIsQ0FBQztJQUtELGFBQWEsRUFBRTtRQUNiLElBQUksSUFBSSxHQUFDLElBQUksQ0FBQztRQUNkLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLEVBQUUsT0FBTztTQUNqQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQVFGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1pbmlwcm9ncmFtL3BhZ2VzL2F1ZGl0L3JlcG9ydC5qc1xyXG5pbXBvcnQgYXBpIGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvbmV0LnNlcnZpY2UnO1xyXG5pbXBvcnQge21haW5UeXBlfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL25ldC5zZXJ2aWNlJztcclxuUGFnZSh7XHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdoueahOWIneWni+aVsOaNrlxyXG4gICAqL1xyXG4gIGRhdGE6IHtcclxuICAgIGRhdGFPYmo6PGFueT5bXSxcclxuICAgIGN1cnJlbnQ6IDxtYWluVHlwZT4nY29tbXVuaXR5JyxcclxuICAgIHBhZ2VudW06IDEsXHJcbiAgfSxcclxuICB0YXAgKGU6YW55KSB7XHJcbiAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICBjdXJyZW50OiBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlXHJcbiAgICB9KVxyXG4gICAgdGhpcy5nZXREYXRhT2JqdCgpO1xyXG4gIH0sXHJcblxyXG4gIGdldERhdGFPYmp0KCkge1xyXG4gICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgIC8vIHR5cGU6PG1haW5UeXBlPiAnY29tbXVuaXR5JyxcclxuICAgICAgdHlwZTogdGhpcy5kYXRhLmN1cnJlbnQsXHJcbiAgICAgIHBhZ2U6IHRoaXMuZGF0YS5wYWdlbnVtLFxyXG4gICAgICBwYWdlU2l6ZTogMjVcclxuICAgIH1cclxuICAgIGFwaS5nZXRSZXBvcnREYXRhKChkYXRhKSkudGhlbigocmVzOmFueSk9PntcclxuICAgICAgY29uc29sZS5sb2coJ+aVsOaNricsIHJlcylcclxuICAgICAgcmVzLmRhdGEucmVzdWx0Lm1hcCgoaXRlbTphbnkpID0+IHtcclxuICAgICAgICAvLyByZXR1cm4gaXRlbS5jcmVhdGVfdGltZSA9IGl0ZW0uY3JlYXRlX3RpbWUuc3BsaXQoJyAnKVswXS5yZXBsYWNlKC8tL2csXCIvXCIpO1xyXG4gICAgICAgIGxldCB0aW1lID0gaXRlbS5jcmVhdGVfdGltZS5zdWJzdHJpbmcoMCwxMCk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uY3JlYXRlX3RpbWUgPSB0aW1lLnJlcGxhY2UoLy0vZyxcIi9cIik7XHJcbiAgICAgIH0pXHJcbiAgICAgIHZhciBhcnIxID0gdGhpcy5kYXRhLmRhdGFPYmo7IC8v5LuOZGF0YeiOt+WPluW9k+WJjWRhdGFsaXN05pWw57uEXHJcbiAgICAgIHZhciBhcnIyID0gcmVzLmRhdGEucmVzdWx0OyAvL+S7juatpOasoeivt+axgui/lOWbnueahOaVsOaNruS4reiOt+WPluaWsOaVsOe7hFxyXG4gICAgICBhcnIxID0gYXJyMS5jb25jYXQoYXJyMik7IC8v5ZCI5bm25pWw57uEXHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgZGF0YU9iajogYXJyMSAvL+WQiOW5tuWQjuabtOaWsGRhdGFsaXN0XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XHJcbiAgICovXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgY29uc3QgZXZlbnRDaGFubmVsID0gdGhpcy5nZXRPcGVuZXJFdmVudENoYW5uZWwoKTtcclxuICAgIC8vIOebkeWQrGluZm/kuovku7bvvIzojrflj5bkuIrkuIDpobXpnaLpgJrov4dldmVudENoYW5uZWzkvKDpgIHliLDlvZPliY3pobXpnaLnmoTmlbDmja5cclxuICAgIGV2ZW50Q2hhbm5lbC5vbihcImN1cnJlbnRJbmZvXCIsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgIHRoYXQuc2V0RGF0YSh7XHJcbiAgICAgICAgY3VycmVudDogZGF0YVxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgIHRoaXMuZ2V0RGF0YU9ianQoKTtcclxuICAgIH0sMTAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XHJcbiAgICovXHJcbiAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcclxuICAgKi9cclxuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xyXG5cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcclxuICAgKi9cclxuICBvblJlYWNoQm90dG9tOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGhhdD10aGlzO1xyXG4gICAgdmFyIHBhZ2VudW0gPSB0aGF0LmRhdGEucGFnZW51bSArIDE7IC8v6I635Y+W5b2T5YmN6aG15pWw5bm2KzFcclxuICAgIGNvbnNvbGUubG9nKHRoYXQuZGF0YS5wYWdlbnVtLCAnb25SZWFjaEJvdHRvbScpO1xyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgcGFnZW51bTogcGFnZW51bSwgLy/mm7TmlrDlvZPliY3pobXmlbBcclxuICAgIH0pXHJcbiAgICB0aGlzLmdldERhdGFPYmp0KCk7Ly/ph43mlrDosIPnlKjor7fmsYLojrflj5bkuIvkuIDpobXmlbDmja5cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcclxuICAgKi9cclxuICAvLyBvblNoYXJlQXBwTWVzc2FnZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAvLyB9XHJcbn0pIl19